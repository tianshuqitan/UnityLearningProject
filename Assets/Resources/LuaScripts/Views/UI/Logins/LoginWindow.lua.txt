---
-- MIT License
--
-- Copyright (c) 2018 Clark Yang
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy of 
-- this software and associated documentation files (the "Software"), to deal in 
-- the Software without restriction, including without limitation the rights to 
-- use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
-- of the Software, and to permit persons to whom the Software is furnished to do so, 
-- subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all 
-- copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
-- SOFTWARE.
---

require("framework.System")

local Loading = CS.Loxodon.Framework.Views.Loading
local Toast = CS.Loxodon.Framework.Views.Toast

---
--模块
--@module LoginWindow
local M=class("LoginWindow",target)

function M:onCreate(bundle)
	local bindingSet = self:CreateBindingSet();

	bindingSet:Bind():For("onInteractionFinished"):To("interactionFinished")
    bindingSet:Bind():For("onToastShow"):To("toastRequest")

	bindingSet:Bind(self.username):For ("text", "onEndEdit"):To ("username"):TwoWay ()
	bindingSet:Bind(self.usernameErrorPrompt):For ("text"):To ("errors['username']"):OneWay ()
	bindingSet:Bind(self.password):For ("text","onEndEdit"):To ("password"):TwoWay ()
	bindingSet:Bind(self.passwordErrorPrompt):For ("text"):To ("errors['password']"):OneWay ()
	bindingSet:Bind(self.confirmButton):For ("onClick"):To ("loginCommand")
	bindingSet:Bind(self.cancelButton):For ("onClick"):To ("cancelCommand")
	bindingSet:Build()
end

function M:onInteractionFinished(sender, args)
    self:Dismiss()
end

function M:onToastShow(sender, args)
    local notification = args.Context
    if not notification then
        return
	end

    Toast.Show(self, notification, 2);
end

return M