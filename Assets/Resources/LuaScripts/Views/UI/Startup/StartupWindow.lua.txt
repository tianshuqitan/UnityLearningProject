---
-- MIT License
--
-- Copyright (c) 2018 Clark Yang
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy of 
-- this software and associated documentation files (the "Software"), to deal in 
-- the Software without restriction, including without limitation the rights to 
-- use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
-- of the Software, and to permit persons to whom the Software is furnished to do so, 
-- subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all 
-- copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
-- SOFTWARE.
---

require("framework.System")

local Loading = CS.Loxodon.Framework.Views.Loading
local Context = CS.Loxodon.Framework.Contexts.Context

local StartupViewModel = require("Views.UI.Startup.StartupViewModel")

---
--模块
--@module StartupWindow
local M=class("StartupWindow",target)

function M:onCreate(bundle)
	self.viewModel = StartupViewModel()

	self:BindingContext().DataContext = self.viewModel

	local context = Context.GetApplicationContext() 

	self.locator = context:GetService("IUIViewLocator")

	local bindingSet = self:CreateBindingSet()

	bindingSet:Bind():For("onOpenLoginWindow"):To("loginRequest")
	bindingSet:Bind():For("onDismissRequest"):To("dismissRequest")

	bindingSet:Bind(self.progressBarSlider):For("value", "onValueChanged"):To("progressBar.progress"):TwoWay()
	bindingSet:Bind(self.progressBarSlider.gameObject):For("activeSelf"):To("progressBar.enable"):OneWay()
	bindingSet:Bind(self.progressBarText):For("text"):ToExpression(function(vm) return string.format("%0.2f%%",vm.progressBar.progress * 100) end,"progressBar.progress"):OneWay()
	bindingSet:Bind(self.tipText):For("text"):To("progressBar.tip"):OneWay()
	bindingSet:Bind(self.button):For("onClick"):To("command"):OneWay()
	bindingSet:Build()

	self.viewModel:unzip()
end

function M:onDismissRequest(sender, args)
	self:Dismiss()
end

function M:onOpenLoginWindow(sender, args)
	local loginWindow = self.locator:LoadWindow(self.WindowManager, "LuaUI/Logins/Login"); 

	local callback = args.Callback;
	local loginViewModel = args.Context;

	if callback then
		local handler = null;
		handler = function(window, e)
			loginWindow:OnDismissed("-",handler)
			if callback then
				callback()
			end
		end
		loginWindow:OnDismissed("+",handler)
	end
	
	loginWindow:SetDataContext(loginViewModel)
	loginWindow:Create()	
	loginWindow:Show()
end

return M